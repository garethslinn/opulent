"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/app/utils/getTheme.ts":
/*!***********************************!*\
  !*** ./src/app/utils/getTheme.ts ***!
  \***********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getTheme: function() { return /* binding */ getTheme; },\n/* harmony export */   setTheme: function() { return /* binding */ setTheme; },\n/* harmony export */   toggleTheme: function() { return /* binding */ toggleTheme; }\n/* harmony export */ });\n/* harmony import */ var _theme__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/theme */ \"(app-pages-browser)/./src/theme.ts\");\n// src/utils/getTheme.ts\n\nconst getTheme = ()=>{\n    if (true) {\n        var _savedTheme_colors;\n        const savedTheme = localStorage.getItem(\"theme\");\n        return ((_savedTheme_colors = savedTheme.colors) === null || _savedTheme_colors === void 0 ? void 0 : _savedTheme_colors.primary) === \"#000\" ? \"light\" : \"dark\";\n    }\n    return \"light\";\n};\nconst setTheme = (theme)=>{\n    if (true) {\n        localStorage.setItem(\"theme\", theme);\n    }\n};\nconst toggleTheme = (currentTheme)=>{\n    const newTheme = currentTheme === _theme__WEBPACK_IMPORTED_MODULE_0__.lightTheme ? _theme__WEBPACK_IMPORTED_MODULE_0__.darkTheme : _theme__WEBPACK_IMPORTED_MODULE_0__.lightTheme;\n    const newThemeName = newTheme === _theme__WEBPACK_IMPORTED_MODULE_0__.lightTheme ? \"light\" : \"dark\";\n    setTheme(newThemeName);\n    return newTheme;\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9hcHAvdXRpbHMvZ2V0VGhlbWUudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLHdCQUF3QjtBQUN3QjtBQUV6QyxNQUFNRSxXQUFXO0lBQ3BCLElBQUksSUFBNkIsRUFBRTtZQUd4QkM7UUFGUCxNQUFNQSxhQUFhQyxhQUFhQyxPQUFPLENBQUM7UUFFeEMsT0FBT0YsRUFBQUEscUJBQUFBLFdBQVdHLE1BQU0sY0FBakJILHlDQUFBQSxtQkFBbUJJLE9BQU8sTUFBSyxTQUFTLFVBQVU7SUFDN0Q7SUFDQSxPQUFPO0FBQ1gsRUFBRTtBQUVLLE1BQU1DLFdBQVcsQ0FBQ0M7SUFDckIsSUFBSSxJQUE2QixFQUFFO1FBQy9CTCxhQUFhTSxPQUFPLENBQUMsU0FBU0Q7SUFDbEM7QUFDSixFQUFFO0FBRUssTUFBTUUsY0FBYyxDQUFDQztJQUN4QixNQUFNQyxXQUFXRCxpQkFBaUJaLDhDQUFVQSxHQUFHQyw2Q0FBU0EsR0FBR0QsOENBQVVBO0lBQ3JFLE1BQU1jLGVBQWVELGFBQWFiLDhDQUFVQSxHQUFHLFVBQVU7SUFDekRRLFNBQVNNO0lBQ1QsT0FBT0Q7QUFDWCxFQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL3NyYy9hcHAvdXRpbHMvZ2V0VGhlbWUudHM/NzkyMiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvdXRpbHMvZ2V0VGhlbWUudHNcbmltcG9ydCB7IGxpZ2h0VGhlbWUsIGRhcmtUaGVtZSB9IGZyb20gXCJAL3RoZW1lXCI7XG5cbmV4cG9ydCBjb25zdCBnZXRUaGVtZSA9ICgpID0+IHtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBjb25zdCBzYXZlZFRoZW1lID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJ0aGVtZVwiKTtcblxuICAgICAgICByZXR1cm4gc2F2ZWRUaGVtZS5jb2xvcnM/LnByaW1hcnkgPT09IFwiIzAwMFwiID8gJ2xpZ2h0JyA6ICdkYXJrJztcbiAgICB9XG4gICAgcmV0dXJuICdsaWdodCc7XG59O1xuXG5leHBvcnQgY29uc3Qgc2V0VGhlbWUgPSAodGhlbWU6IFwibGlnaHRcIiB8IFwiZGFya1wiKSA9PiB7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJ0aGVtZVwiLCB0aGVtZSk7XG4gICAgfVxufTtcblxuZXhwb3J0IGNvbnN0IHRvZ2dsZVRoZW1lID0gKGN1cnJlbnRUaGVtZTogYW55KSA9PiB7XG4gICAgY29uc3QgbmV3VGhlbWUgPSBjdXJyZW50VGhlbWUgPT09IGxpZ2h0VGhlbWUgPyBkYXJrVGhlbWUgOiBsaWdodFRoZW1lO1xuICAgIGNvbnN0IG5ld1RoZW1lTmFtZSA9IG5ld1RoZW1lID09PSBsaWdodFRoZW1lID8gXCJsaWdodFwiIDogXCJkYXJrXCI7XG4gICAgc2V0VGhlbWUobmV3VGhlbWVOYW1lKTtcbiAgICByZXR1cm4gbmV3VGhlbWU7XG59O1xuIl0sIm5hbWVzIjpbImxpZ2h0VGhlbWUiLCJkYXJrVGhlbWUiLCJnZXRUaGVtZSIsInNhdmVkVGhlbWUiLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwiY29sb3JzIiwicHJpbWFyeSIsInNldFRoZW1lIiwidGhlbWUiLCJzZXRJdGVtIiwidG9nZ2xlVGhlbWUiLCJjdXJyZW50VGhlbWUiLCJuZXdUaGVtZSIsIm5ld1RoZW1lTmFtZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/utils/getTheme.ts\n"));

/***/ })

});